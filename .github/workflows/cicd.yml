name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: j22868706/taipeidaytrip_app:latest,j22868706/taipeidaytrip_app:${{ github.sha }}
          cache-from: type=registry,ref=j22868706/taipeidaytrip_app:latest
          cache-to: type=inline

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull the latest image
            sudo docker pull j22868706/taipeidaytrip_app:latest || { echo "Failed to pull image"; exit 1; }

            # Stop and remove existing container if it exists
            if [ "$(sudo docker ps -q -f name=app)" ]; then
              sudo docker stop app || { echo "Failed to stop container"; exit 1; }
              sudo docker rm app || { echo "Failed to remove container"; exit 1; }
            fi

            # Run container with environment variables matching app.py expectations
            sudo docker run -d \
              --name app \
              --restart unless-stopped \
              -p 80:80 \
              -p 3000:3000 \
              -e host="${{ secrets.DB_HOST }}" \
              -e port="${{ secrets.DB_PORT }}" \
              -e user="${{ secrets.DB_USER }}" \
              -e password="${{ secrets.DB_PASSWORD }}" \
              -e database="${{ secrets.DB_NAME }}" \
              j22868706/taipeidaytrip_app:latest || { echo "Failed to run container"; exit 1; }

            # Wait briefly and verify container is running
            sleep 5
            if [ "$(sudo docker ps -q -f name=app)" ]; then
              echo "Container is running:"
              sudo docker ps | grep app
            else
              echo "Container failed to start, checking logs:"
              sudo docker logs app
              exit 1
            fi

            # Check initial logs for startup errors
            echo "Initial container logs:"
            sudo docker logs app
